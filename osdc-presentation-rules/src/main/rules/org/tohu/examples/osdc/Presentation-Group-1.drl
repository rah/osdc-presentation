/*
 * Group 1 definitions
 */
 
package org.tohu.examples.osdc;

import java.util.Calendar;

import org.tohu.Group;
import org.tohu.InvalidAnswer;
import org.tohu.Question;
import org.tohu.MultipleChoiceQuestion;
import org.tohu.MultipleChoiceQuestion.PossibleAnswer;
import org.tohu.Questionnaire;
import org.tohu.Note;

function boolean notContainedIn(String value, String compare) {
	return !compare.contains(value);
}

rule "Introduction - Slide 1"
dialect "mvel"
then
	Note note = new Note();
	note.setId("introduction-note");
	note.setLabel("Click on the checkboxes to get more information.");
	note.setPresentationStyles({"expandedTip"});
	insertLogical(note);	
end	

##############################################################################
# Presenter
##############################################################################

rule "Presenter name question"
then
	Question q = new Question();
	q.setId("presenters-name");
	q.setAnswerType("text");
	q.setPreLabel("Who is the presenter?");
	insertLogical(q);
end

rule "Presenter name invalid"
when
	Question( id == "presenters-name", answered == true, textAnswer not matches "^R[A-Za-z]*")
then
	InvalidAnswer ia = new InvalidAnswer();
	ia.setQuestionId("presenters-name");
	ia.setReason("Sorry, you need to respond with a name beginning with R");
	insertLogical(ia);
end

rule "Presenter name question response"
when
	$q : Question ( id == "presenters-name", answered == true, textAnswer matches "^R[A-Za-z]*" )
then
	MultipleChoiceQuestion multi = new MultipleChoiceQuestion();
	multi.setId("presenters-response-question");
	multi.setAnswerType("text");
	multi.setPreLabel("Select an option " + $q.getTextAnswer() + ":");
	multi.setPossibleAnswers(new PossibleAnswer[] {
		new PossibleAnswer("A1", "Select option ..."),
		new PossibleAnswer("A2", "About the presenter"),
		new PossibleAnswer("A3", "Show me the agenda!")
	});
	insertLogical(multi);	
end

rule "Presenter check reponse name in prelabel still matches"
when
	$q : Question ( id == "presenters-name", answered == true, textAnswer matches "^R[A-Za-z]*" )
	$m : MultipleChoiceQuestion ( id == "presenters-response-question" ) 
	eval ( notContainedIn($q.getTextAnswer(), $m.getPreLabel()) )		
then
	$m.setPreLabel("Select an option " + $q.getTextAnswer() + ":");
	update ($m);
end

rule "Presenter name unknown"
when
	$q : Question( id == "presenters-name", answered == true, textAnswer != "Ross" )
	MultipleChoiceQuestion( id == "presenters-response-question", answered == true, textAnswer == "A2" )
then
	Note note = new Note();
	note.setId("presenters-name-unknown");
	note.setLabel("I don't have any information about " + $q.getTextAnswer() + " try Ross");
	note.setPresentationStyles(new String [] {"expandedTip"});
	insertLogical(note);
end

rule "Presenter name known"
when
	$q : Question( id == "presenters-name", answered == true, textAnswer == "Ross" )
	MultipleChoiceQuestion( id == "presenters-response-question", answered == true, textAnswer == "A2" )
then
	Note note = new Note();
	note.setId("presenters-name-known");
	note.setLabel("Yeh, I know this guy " + $q.getTextAnswer() + " don't trust him - he's an architect");
	note.setPresentationStyles(new String [] {"expandedTip"});
	insertLogical(note);
end

##############################################################################
# Agenda
##############################################################################

rule "Agenda - Question"
dialect "mvel" 
then
	Question q = new Question();
	q.setId("agenda");
	q.setAnswerType("boolean");
	q.setPresentationStyles({"checkbox"});
	q.setPreLabel("Agenda items:");	
	insertLogical(q);
end

rule "Agenda - Response"
dialect "mvel" 
when
	Question (id == "agenda", booleanAnswer == true)
then
	Note note = new Note();
	note.setId("agenda-note");
	note.setLabel("<UL>" + 
		"<LI>Who's Involved" +
		"<LI>What does it do" +
		"<LI>What are the pieces" +
		"<LI>What is the model" +
		"<LI>The entry point" +
		"<LI>The rules" +
		"<LI>The java script engine" +
		"<LI>The execution server" +
		"<LI>More questions" +
		"</UL");
	note.setPresentationStyles({"expandedTip"});
	insertLogical(note);	
end

rule "Agenda - Help"
dialect "mvel" 
then
	Note note = new Note();
	note.setId("agenda-help");
	note.setLabel("Ask questions at any point!");
	note.setPresentationStyles({"tip"});
	insertLogical(note);	
end	

##############################################################################
# Who's Involved
##############################################################################

rule "Involved - Question"
dialect "mvel" 
then
	Question q = new Question();
	q.setId("involved");
	q.setAnswerType("boolean");
	q.setPresentationStyles({"checkbox"});
	q.setPreLabel("Who's involved:");	
	insertLogical(q);
end

rule "Involved - Reponse"
dialect "mvel" 
when
	Question (id == "involved", booleanAnswer == true)
then
	Note note = new Note();
	note.setId("involved-note");
	note.setLabel("Collaboration between:" +
		"<UL>" +
			"<LI>Solnet New Zealand" +
			"<LI>JBoss Drools" +
			"<LI>Suncorp" +
		"</UL>");
	note.setPresentationStyles({"expandedTip"});
	insertLogical(note);	
end

rule "Involved - Image"
dialect "mvel"
when
	Question (id == "involved", booleanAnswer == true)
then
	Note note = new Note();
	note.setId("involved-image");
	note.setLabel("images/whos-involved.png");
	note.setPresentationStyles({"image"});
	insertLogical(note);	
end

##############################################################################
# What does it do
##############################################################################

rule "Functionality - Question"
dialect "mvel" 
then
	Question q = new Question();
	q.setId("functionality");
	q.setAnswerType("boolean");
	q.setPresentationStyles({"radio"});
	q.setPreLabel("What is <b>Tohu</b> for?");	
	insertLogical(q);
end

rule "Functionality - Reponse"
dialect "mvel" 
when
	Question (id == "functionality", booleanAnswer == true)
then
	Note note = new Note();
	note.setId("functionality-note");
	note.setLabel("<p>Designed to support question and answer style interactions where the set of questions are dynamic and potentially dependent on the answers received</p>" +
		"<p>Initial version targeted at interactive web applications, however technology independent and could be used in B2B scenarios, mobile devices, etc</p>" +
		"<p>Not a UI framework and designed to complement and work within existing frameworks such as Seam/JSF/Spring MV</p>"
	);
	note.setPresentationStyles({"expandedTip"});
	insertLogical(note);	
end

/*
rule "Functionality - Image"
dialect "mvel"
when
	Question (id == "functionality", booleanAnswer == true)
then
	Note note = new Note();
	note.setId("functionality-image");
	note.setLabel("images/mars.jpg");
	note.setPresentationStyles({"image"});
	insertLogical(note);	
end
*/